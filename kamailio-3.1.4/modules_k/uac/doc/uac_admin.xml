<?xml version="1.0" encoding='ISO-8859-1'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- Include general documentation entities -->
<!ENTITY % docentities SYSTEM "../../../docbook/entities.xml">
%docentities;

]>
<!-- Module User's Guide -->

<chapter>
	
	<title>&adminguide;</title>


	<section>
		<title>Overview</title>
		<para>
		UAC (User Agent Client) module provides some basic UAC
		functionalities like FROM header manipulation (anonymization)
		or client authentication.
		</para>
		<para>
		From version 1.5.0 it has function to send SIP message from
		configuration file. See variable $uac_req(name) and the function
		uac_req_send().
		</para>
		<para>
		Version 3.1.0 adds user registration functionality. See
		uac_reg_lookup() function and dedicated section for remote
		registration configuration.
		</para>
		<para>
		Known limitations in this version:
		</para>
		<itemizedlist>
			<listitem>
			<para>
				authentication does not support qop auth-int, just qop auth;
			</para>
			</listitem>
			<listitem>
			<para>
				CSeq not increased during authentication - the response 
				may be rejected.
			</para>
			</listitem>
		</itemizedlist>
	</section>

	<section>
		<title>Dependencies</title>
		<section>
			<title>&kamailio; Modules</title>
			<para>
			The following modules must be loaded before this module:
			<itemizedlist>
			<listitem>
			<para>
				<emphasis>TM - Transaction Module</emphasis>
			</para>
			</listitem>
			<listitem>
			<para>
				<emphasis>RR - Record-Route Module</emphasis>, but only if
				restore mode for FROM URI is set to <quote>auto</quote>.
			</para>
			</listitem>
			</itemizedlist>
			</para>
		</section>
		<section>
			<title>External Libraries or Applications</title>
			<para>
				The following libraries or applications must be installed 
				before running &kamailio; with this module loaded:
				<itemizedlist>
				<listitem>
				<para>
					<emphasis>None</emphasis>
				</para>
				</listitem>
				</itemizedlist>
			</para>
		</section>
	</section>

	<section>
		<title>Exported Parameters</title>
		<section>
			<title><varname>rr_store_param</varname> (string)</title>
			<para>
			Name of Record-Route header parameter that will be used to store 
			(encoded) the original FROM URI.
			</para>
			<para>
				<emphasis>
					This parameter is optional, it's default value being 
					<quote>vsf</quote>.
				</emphasis>
			</para>
			<example>
				<title>Set <varname>rr_store_param</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac","rr_store_param","my_param")
...
				</programlisting>
			</example>
		</section>
		<section>
			<title><varname>from_restore_mode</varname> (string)</title>
			<para>
			There are 3 mode of restoring the original FROM URI:
			<itemizedlist>
			<listitem>
				<para>
				<quote>none</quote> - no information about original URI is 
				stored; restoration is not possible.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>manual</quote> - all following replies will be restored,
				but not also the sequential requests - this must be manually 
				updated based on original URI.
				</para>
			</listitem>
			<listitem>
				<para>
				<quote>auto</quote> - all sequential requests and replies will 
				be automatically updated based on stored original URI.
				</para>
			</listitem>
			</itemizedlist>
			</para>
			<para>
				<emphasis>
					This parameter is optional, it's default value being 
					<quote>auto</quote>.
				</emphasis>
			</para>
			<example>
				<title>Set <varname>from_restore_mode</varname> parameter
				</title>
				<programlisting format="linespecific">
...
modparam("uac","from_restore_mode","auto")
...
				</programlisting>
			</example>
		</section>
		<section>
			<title><varname>from_passwd</varname> (string)</title>
			<para>
			String password to be used to encrypt the RR storing parameter. If
			empty, no encryption will be used.
			</para>
			<para>
				<emphasis>
					Default value of this parameter is empty.
				</emphasis>
			</para>
			<example>
				<title>Set <varname>from_passwd</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac","from_passwd","my_secret_passwd")
...
				</programlisting>
			</example>
		</section>
		<section>
			<title><varname>credential</varname> (string)</title>
			<para>
			Contains a multiple definition of credentials used to perform
			authentication.
			</para>
			<para>
				<emphasis>
					This parameter is required if UAC authentication is used.
				</emphasis>
			</para>
			<example>
				<title>Set <varname>credential</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac","credential","username:domain:password")
...
				</programlisting>
			</example>
		</section>
		<section id="auth-realm-avp-id">
			<title><varname>auth_realm_avp</varname> (string)</title>
			<para>
			The definition of an AVP that might contain the realm to be used
			to perform authentication.
			</para>
			<para><emphasis>
				If you define it, you also need to define 
				<quote>auth_username_avp</quote> 
				(<xref linkend="auth-username-avp-id"/>) and 
				<quote>auth_username_avp</quote> 
				(<xref linkend="auth-password-avp-id"/>).
			</emphasis></para>
			<example>
				<title>Set <varname>auth_realm_avp</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac","auth_realm_avp","$avp(i:10)")
...
				</programlisting>
			</example>
		</section>
		<section id="auth-username-avp-id">
			<title><varname>auth_username_avp</varname> (string)</title>
			<para>
			The definition of an AVP that might contain the username to be used
			to perform authentication.
			</para>
			<para><emphasis>
				If you define it, you also need to define 
				<quote>auth_realm_avp</quote> 
				(<xref linkend="auth-realm-avp-id"/>) and 
				<quote>auth_username_avp</quote> 
				(<xref linkend="auth-password-avp-id"/>).
			</emphasis></para>
			<example>
				<title>Set <varname>auth_username_avp</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac","auth_username_avp","$avp(i:11)")
...
				</programlisting>
			</example>
		</section>
		<section id="auth-password-avp-id">
			<title><varname>auth_password_avp</varname> (string)</title>
			<para>
			The definition of an AVP that might contain the password to be used
			to perform authentication.
			</para>
			<para><emphasis>
				If you define it, you also need to define 
				<quote>auth_password_avp</quote> 
				(<xref linkend="auth-password-avp-id"/>) and 
				<quote>auth_username_avp</quote> 
				(<xref linkend="auth-password-avp-id"/>).
			</emphasis></para>
			<example>
				<title>Set <varname>auth_password_avp</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac","auth_password_avp","$avp(i:12)")
...
				</programlisting>
			</example>
		</section>
		<section id="reg-db-url-id">
			<title><varname>reg_db_url</varname> (string)</title>
			<para>
			DB URL to fetch user profiles for registration.
			</para>
			<example>
				<title>Set <varname>reg_db_url</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac", "reg_db_url",
    "mysql://openser:openserrw@localhost/openser")
...
				</programlisting>
			</example>
		</section>
		<section id="reg-contact-addr-id">
			<title><varname>reg_contact_addr</varname> (string)</title>
			<para>
			Address to be used to build contact address. Must be at least
			host part, can have port and parameters. Must not include 'sip:'.
			</para>
			<example>
				<title>Set <varname>reg_contact_addr</varname> parameter</title>
				<programlisting format="linespecific">
...
modparam("uac", "reg_contact_addr", "192.168.1.2:5080")
...
				</programlisting>
			</example>
		</section>
	</section>


	<section>
		<title>Exported Functions</title>
		<section>
			<title>
				<function moreinfo="none">uac_replace_from(display,uri)</function>
			</title>
			<para>
			Replace in FROM header the <emphasis>display</emphasis> name and
			the <emphasis>URI</emphasis> part.
			</para>
			<para>
			<emphasis>display</emphasis> and <emphasis>URI</emphasis> parameters
			can include pseudo-variables.
			</para>
			<para>
			This function can be used from REQUEST_ROUTE and from BRANCH_ROUTE.
			</para>
			<example>
				<title><function>uac_replace_from</function> usage</title>
				<programlisting format="linespecific">
...
# replace both display and uri
uac_replace_from("$avp(s:display)","$avp(s:uri)");
# replace only display and do not touch uri
uac_replace_from("batman","");
# remove display and replace uri
uac_replace_from("","sip:robin@gotham.org");
# remove display and do not touch uri
uac_replace_from("","");
...
				</programlisting>
			</example>
		</section>
		<section>
			<title>
				<function moreinfo="none">uac_replace_from(uri)</function>
			</title>
			<para>
				Replace in FROM header the <emphasis>URI</emphasis> part
				without altering the display name.
			</para>
			<para>
			<emphasis>URI</emphasis> parameter can include pseudo-variables.
			</para>
			<para>
			This function can be used from REQUEST_ROUTE and from BRANCH_ROUTE.
			</para>
			<example>
				<title><function>uac_replace_from</function> usage</title>
				<programlisting format="linespecific">
...
uac_replace_from("sip:batman@gotham.org");
...
				</programlisting>
			</example>
		</section>
		<section>
			<title>
				<function moreinfo="none">uac_restore_from()</function>
			</title>
			<para>
			This function will check if the FROM URI was modified and will
			use the information stored in header parameter to restore
			the original FROM URI value.
			</para>
			<para>
			This function can be used from REQUEST_ROUTE.
			</para>
			<example>
				<title><function>uac_restore_from</function> usage</title>
				<programlisting format="linespecific">
...
uac_restore_from();
...
				</programlisting>
			</example>
		</section>
		<section>
			<title>
				<function moreinfo="none">uac_auth()</function>
			</title>
			<para>
			This function can be called only from failure route and will 
			build the authentication response header and insert it into the
			request without sending anything.
			</para>
			<para>
			This function can be used from FAILURE_ROUTE.
			</para>
			<example>
				<title><function>uac_auth</function> usage</title>
				<programlisting format="linespecific">
...
uac_auth();
...
				</programlisting>
			</example>
		</section>
		<section>
			<title>
				<function moreinfo="none">uac_req_send()</function>
			</title>
			<para>
			This function sends a SIP message from the configuration file.
			The message is built out of $uac_req(...) pseudo-variable.
			</para>
			<para>
			This function can be used from REQUEST_ROUTE, FAILURE_ROUTE,
			BRANCH_ROUTE, ONREPLY_ROUTE, LOCAL_ROUTE.
			</para>
			<example>
				<title><function>uac_req_send</function> usage</title>
				<programlisting format="linespecific">
...
$uac_req(method)="OPTIONS";
$uac_req(ruri)="sip:kamailio.org";
$uac_req(furi)="sip:kamailio.org";
$uac_req(turi)="sip:kamailio.org";
uac_req_send();
...
				</programlisting>
			</example>
		</section>
		<section>
			<title>
				<function moreinfo="none">uac_reg_lookup(uuid, dst)</function>
			</title>
			<para>
			This function sets the PV dst to SIP URI that correspond to uuid
			in uac registations table. uuid and dst must be pseudo-variables.
			</para>
			<para>
			This function can be used from ANY_ROUTE.
			</para>
			<example>
				<title><function>uac_reg_lookup</function> usage</title>
				<programlisting format="linespecific">
...

if(uac_reg_lookup("$rU", "$ru"))
{
    lookup("location");
}
...
				</programlisting>
			</example>
		</section>
	</section>
	<section>
		<title>Exported pseudo-variables</title>
		<itemizedlist>
			<listitem><para>
				<emphasis>$uac_req(key)</emphasis>
			</para></listitem>
		</itemizedlist>
		<para>
		Exported pseudo-variables are documented at &kamwikilink;.
		</para>
	</section>
	<section>
		<title>Remote Registration</title>
		<para>
		The module can register contact addresses to remote REGISTRAR servers.
		You have to add records to uacreg table. The table stores following
		attributes:
		</para>

		<itemizedlist>
			<listitem><para>
			<emphasis>l_uuid</emphasis> - local unique user id, e.g.,:
			12345678
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>l_username</emphasis> - local user name, e.g.,: test
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>l_domain</emphasis> - local domain, e.g.,:
			mysipserver.com
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>r_username</emphasis> - remote username, e.g.,:
			test123
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>r_domain</emphasis> - remote domain, e.g.,:
			sipprovider.com
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>realm</emphasis> - remote relam, e.g.,:
			sipprovider.com
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>auth_username</emphasis> - authentication username,
			e.g.,: test123
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>auth_password</emphasis> - authentication password,
			e.g.,: xxxxxx
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>auth_proxy</emphasis> - SIP address of authentication
			proxy, e.g.,: sip:sipprovider.com
			</para></listitem>
		</itemizedlist>
		<itemizedlist>
			<listitem><para>
			<emphasis>expires</emphasis> - expiration time for registration,
			in seconds, e.g.,: 360
			</para></listitem>
		</itemizedlist>

		<para>
		The module takes care of sending REGISTER and refresh registrations
		before they expire.
		</para>
		<para>
		When calls come in, you have to run uac_reg_lookup() that will detect
		if the call is coming from a remote SIP provider and can change the
		R-URI to local username@domain. Afterwards you can run location lookup.
		</para>

		<example>
		<title><function>lookup remote registrations</function> usage</title>
			<programlisting format="linespecific">
...
    if(uac_reg_lookup("$rU", "$ru")) {
        xlog("request from a remote SIP provider [$ou => $ru]\n");
    }
    lookup("location");
...
			</programlisting>
		</example>
	</section>
</chapter>

