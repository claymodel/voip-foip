<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" 
   "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<section id="xmlrpc.parameters" xmlns:xi="http://www.w3.org/2001/XInclude">
	<sectioninfo>
	<revhistory>
		<revision>
		<revnumber>$Revision$</revnumber>
		<date>$Date$</date>
		</revision>
	</revhistory>
	</sectioninfo>

	<title>Parameters</title>

	<section id="route">
	<title><varname>route</varname> (string)</title>
	<para>
		Name of the route called for XMLRPC messages.
	</para>
	<para>
		This route will be called only for HTTP messages whose method is
		either GET or POST. The message visible inside the route
		will be a HTTP request converted to SIP (the uri will be fixed and
		a fake via will be added).
	</para>
	<para>
		The route should perform additional security checks to
		ensure the client is authorized to execute management/RPC functions
		and then it should call the <function>dispatch_rpc()</function>.
	</para>
	<para>
		Default: the main route is used.
	</para>
	<example>
		<title>Set <varname>route</varname> parameter</title>
		<programlisting>
modparam("xmlrpc", "route", "route_for_xmlrpcs")
		</programlisting>
	</example>
	</section>

	<section id="autoconversion">
	<title><varname>autoconversion</varname> (string)</title>
	<para>
		Enable or disable automatic parameter type conversion globally, 
		for all the methods parameters.
		If on, a type mismatch in a method parameter
		will not cause a fault if it is possible to automatically
		convert it to the type expected by the method.
	</para>
	<para>
		Default: off.
	</para>
	<para>
		It is recommended to leave this parameter to its default off value
		and fix instead the client application (which should use the
		proper types) or to modify the target rpc to accept any type
		(see the rpc scan '.' modifier).
	</para>
	<example>
		<title>Set the <varname>autoconversion</varname> parameter</title>
		<programlisting>
modparam("xmlrpc", "autoconversion", 1)
		</programlisting>
	</example>
	</section>

	<section id="escape_cr">
	<title><varname>escape_cr</varname> (integer)</title>
	<para>
		Enable CR ('\r') escaping in replies. If enabled each '\r' in the
		xmlrpc reply will be replaced with "&amp;#xD;", according to the
		xml spec.
	</para>
	<para>
		It should be turned off only if you suspect interoperability problems
		with older clients.
	</para>
	<para>
		Default: on.
	</para>
	<example>
		<title>Set the <varname>escape_cr</varname> parameter</title>
		<programlisting>
modparam("xmlrpc", "escape_cr", 1)
		</programlisting>
	</example>
	</section>

	<section id="double_lf_to_crlf">
	<title><varname>double_lf_to_crlf</varname> (integer)</title>
	<para>
		When enabled double LFs ('\n\n') in the input xmlrpc strings
		will be replaced with CR LF ('\r\n'). This makes LF LF behave like
		an escape character for CR LF and is needed for compatibility with
		kamailio tools and to work around buggy xmlrpc clients that don't
		escape the CR in CR LF ('\r' should be escaped to "&amp;#xD;"
		otherwise according to the xml spec "\r\n" will be transformed to
		'\n'), but need to send CR LF in the strings (e.g. they use
		<function>tm.t_uac_wait</function>).
	</para>
	<para>
		Note: when this option is turned on, there is no way to send a double
		LF ('\n\n'), it will always be transformed in CR LF ('\r\n').
	</para>
	<para>
		Default: off.
	</para>
	<example>
		<title>Set the <varname>double_lf_to_crlf</varname> parameter</title>
		<programlisting>
modparam("xmlrpc", "double_lf_to_crlf", 1)
		</programlisting>
	</example>
	</section>

	<section id="param_mode">
	<title><varname>mode</varname> (integer)</title>
	<para>
		When set to 1, xmlrpc module does not register to core the callback
		functions for non-SIP messages. Useful when other module register
		a callback for HTTP request, being the decision of admin when to
		call the XMLRPC route (or functions).
	</para>
	<para>
		Default: 0.
	</para>
	<example>
		<title>Set the <varname>mode</varname> parameter</title>
		<programlisting>
modparam("xmlrpc", "mode", 1)
		</programlisting>
	</example>
	</section>
	<section>
		<title><varname>url_skip</varname> (str)</title>
		<para>
			Regular expression to match the HTPP URL. If there is match,
			then xmlrpc route is not executed.
		</para>
		<para>
		<emphasis>
			Default value is null (don't skip).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>url_skip</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("xmlrpc", "url_skip", "^/sip")
...
</programlisting>
		</example>
	</section>
	<section>
		<title><varname>url_match</varname> (str)</title>
		<para>
			Regular expression to match the HTPP URL. If there is no match,
			then xmlrpc route is not executed. This check is done after
			url_skip, so if both url_skip and url_match would match then
			the xmlrpc route is not executed (url_skip has higher priority).
		</para>
		<para>
		<emphasis>
			Default value is null (match everything).
		</emphasis>
		</para>
		<example>
		<title>Set <varname>url_match</varname> parameter</title>
		<programlisting format="linespecific">
...
modparam("xmlrpc", "url_match", "^/RPC2")
...
</programlisting>
		</example>
	</section>

	<!--
	Obsolete (hardwired on in the rpc core functions, cannot  be turned off) 
	-andrei
	<section id="enable_introspection">
	<title><varname>enable_introspection</varname> (integer)</title>
	<para>
		Enable/disable additional introspection methods. If set to 1 then
		the functions defined in
		http://scripts.incutio.com/xmlrpc/introspection.html
		will be available on the server. If set to 0 then the functions will 
		be disabled.
	</para>
	<para>
		Default: 1 (enabled).
	</para>
	<example>
		<title>Set <varname>enable_introspection</varname> parameter</title>
		<programlisting>
modparam("xmlrpc", "enable_introspection", 0)
		</programlisting>
	</example>
	</section>
	-->

</section>
