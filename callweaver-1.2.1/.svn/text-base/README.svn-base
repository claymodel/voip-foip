CallWeaver http://www.callweaver.org - The True Open Source PBX
   Based on Asterisk Written by Mark Spencer
   Copyright 1999-2005, Digium
================================================================
* SECURITY
  It is imperative that you read and fully understand the contents of
  the SECURITY file before you attempt to configure an CallWeaver server.

* WHAT IS CALLWEAVER
  CallWeaver is an Open Source PBX and telephony toolkit.  It is, in a
sense, middleware between Internet and telephony channels on the bottom,
and Internet and telephony applications at the top.  For more information
on the project itself, please visit the CallWeaver home page at:

           http://www.callweaver.org


* LICENSING
  CallWeaver is distributed under GNU General Public License

* OPERATING SYSTEMS

== Linux ==
  CallWeaver is developed and tested primarily on the GNU/Linux operating 
system, and is supported on every major GNU/Linux distribution.

== Others ==
  CallWeaver has also been 'ported' and reportedly runs properly on other
operating systems as well, including Sun Solaris, Apple's Mac OS X, and
the BSD variants.

* GETTING STARTED

  First, be sure you've got supported hardware (but note that you don't need
ANY special hardware, not even a soundcard) to install and run CallWeaver.

  Supported telephony hardware includes:

	* All Wildcard (tm) products from Digium (www.digium.com)
	* Sangoma A101,A102 and A104 E1/T1/PRI interfaces (www.sangoma.com)
	* Tormenta Dual T1 card (www.bsdtelephony.com.mx)
	* capi4linux compatible ISDN cards
	* HFC chipset based ISDN-BRI PCI cards

  Second, ensure that your system contains a compatible compiler and development
libraries.  CallWeaver requires either the GNU Compiler Collection (GCC) version
3.0 or higher, or a compiler that supports the C99 specification and some of
the gcc language extensions.  In addition, your system needs to have the C
library headers available, and the headers and libraries for OpenSSL and zlib.
On many distributions, these files are installed by packages with names like
'libc-devel', 'openssl-devel' and 'zlib-devel' or similar.

  You will also need spandsp; at least version 0.0.6pre12.  You can download
0.0.6pre12 here: http://www.soft-switch.org/downloads/spandsp/spandsp-0.0.6pre12.tgz
If you need further instructions, please visit http://www.callweaver.org/wiki/CallWeaver

  So let's proceed:

0) SKIP THIS TEST IF YOU HAVE NOT DOWNLOADED THE SOURCES FROM SVN.
   THIS IS INTENDED FOR DEVELOPERS AND USELESS AND DANGEROUS IF
   YOU HAVE DOWNLOADED AN OFFICIAL TGZ. 

  Run "./bootstrap.sh"
   

   The bootstrap script checks the environment and prepares for the 
configure command.

1) Run "./configure"

  The autoconf script "configure" is used to evaluate your local system
and check for dependancies.  It will create a Makefile tailored for
your system which can be used to build CallWeaver.  If your system lacks
any necessary software required for CallWeaver to compile and run, 
the configure script will notify you.

2) Run "make"  (or "gmake" on non-GNU systems)

  On systems which do not use GNU make as the default make, you will need
to specifically run "gmake" instead of the system "make" command for this
and the following install steps.  Assuming the build completes successfully:

3) Run "make install"

  Each time you update or checkout from SVN, you are strongly encouraged 
to ensure all previous object files are removed to avoid internal 
inconsistency in CallWeaver. Normally, this is automatically done with 
the presence of the file .cleancount, which increments each time a 'make clean'
is required, and the file .lastclean, which contains the last .cleancount used. 

  If this is your first time working with CallWeaver, you may wish to install
the sample PBX, with demonstration extensions, etc.  If so, run:

4) "make samples"

  Doing so will overwrite any existing config files you have. If you are lacking a
soundcard you won't be able to use the DIAL command on the console, though.

  Finally, you can launch CallWeaver with:

# callweaver -vvvc

  You'll see a bunch of verbose messages fly by your screen as CallWeaver
initializes (that's the "very very verbose" mode).  When it's ready, if
you specified the "c" then you'll get a command line console, that looks
like this:

*CLI>

  You can type "help" at any time to get help with the system.  For help
with a specific command, type "help <command>".  To start the PBX using
your sound card, you can type "dial" to dial the PBX.  Then you can use
"answer", "hangup", and "dial" to simulate the actions of a telephone.
Remember that if you don't have a full duplex sound card (and CallWeaver
will tell you somewhere in its verbose messages if you do/don't) then it
won't work right (not yet).

  Feel free to look over the configuration files in /etc/callweaver, where
you'll find a lot of information about what you can do with CallWeaver.

* ABOUT CONFIGURATION FILES

  All CallWeaver configuration files share a common format.  Comments are
delimited by ';' (since '#' of course, being a DTMF digit, may occur in
many places).  A configuration file is divided into sections whose names
appear in []'s.  Each section typically contains two types of statements,
those of the form 'variable = value', and those of the form 'object =>
parameters'.  Internally the use of '=' and '=>' is exactly the same, so 
they're used only to help make the configuration file easier to
understand, and do not affect how it is actually parsed.

  Entries of the form 'variable=value' set the value of some parameter in
callweaver.  For example, in zapata.conf, one might specify:

	switchtype=national

in order to indicate to CallWeaver that the switch they are connecting to is
of the type "national".  In general, the parameter will apply to
instantiations which occur below its specification.  For example, if the
configuration file read:

	switchtype = national
	channel => 1-4
	channel => 10-12
	switchtype = dms100
	channel => 25-47

the "national" switchtype would be applied to channels one through
four and channels 10 through 12, whereas the "dms100" switchtype would
apply to channels 25 through 47.
  
  The "object => parameters" instantiates an object with the given
parameters.  For example, the line "channel => 25-47" creates objects for
the channels 25 through 47 of the card, obtaining the settings
from the variables specified above.

* SPECIAL NOTE ON TIME
  
  Those using SIP phones should be aware that CallWeaver is sensitive to
large jumps in time.  Manually changing the system time using date(1)
(or other similar commands) may cause SIP registrations and other
internal processes to fail.  If your system cannot keep accurate time
by itself use NTP (http://www.ntp.org/) to keep the system clock
synchronized to "real time".  NTP is designed to keep the system clock
synchronized by speeding up or slowing down the system clock until it
is synchronized to "real time" rather than by jumping the time and
causing discontinuities. Most Linux distributions include precompiled
versions of NTP.  Beware of some time synchronization methods that get
the correct real time periodically and then manually set the system
clock.

  Apparent time changes due to daylight savings time are just that,
apparent.  The use of daylight savings time in a Linux system is
purely a user interface issue and does not affect the operation of the
Linux kernel or CallWeaver.  The system clock on Linux kernels operates
on UTC.  UTC does not use daylight savings time.

  Also note that this issue is separate from the clocking of TDM
channels, and is known to at least affect SIP registrations.

* FILE DESCRIPTORS

  Depending on the size of your system and your configuration,
CallWeaver can consume a large number of file descriptors.  In UNIX,
file descriptors are used for more than just files on disk.  File
descriptors are also used for handling network communication
(e.g. SIP, IAX2, or H.323 calls) and hardware access (e.g. analog and
digital trunk hardware).  CallWeaver accesses many on-disk files for
everything from configuration information to voicemail storage.

  Most systems limit the number of file descriptors that CallWeaver can
have open at one time.  This can limit the number of simultaneous
calls that your system can handle.  For example, if the limit is set
at 1024 (a common default value) CallWeaver can handle approxiately 150
SIP calls simultaneously.  To change the number of file descriptors
follow the instructions for your system below:

== PAM-based Linux System ==

  If your system uses PAM (Pluggable Authentication Modules) edit
/etc/security/limits.conf.  Add these lines to the bottom of the file:

root            soft    nofile          4096
root            hard    nofile          8196
callweaver      soft    nofile          4096
callweaver      hard    nofile          8196

(adjust the numbers to taste).  You may need to reboot the system for
these changes to take effect.

== Generic UNIX System ==

  If there are no instructions specifically adapted to your system
above you can try adding the command "ulimit -n 8192" to the script
that starts CallWeaver.

* MORE INFORMATION

  See the doc directory for more documentation.

  Finally, you may wish to visit the web site and join the mailing list if
you're interested in getting more information.  We also have an IRC channel
on Freenode, #callweaver.  Drop in with any questions, concerns, or even
just to lurk.

  http://www.callweaver.org


      Welcome to the growing worldwide community of CallWeaver users!

